/// <reference lib="webworker" />

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute, NavigationRoute } from 'workbox-routing';
import {
  StaleWhileRevalidate,
  CacheFirst,
  NetworkFirst,
} from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

// Take control of all pages immediately
clientsClaim();
self.skipWaiting();

// Precache all of the assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Handle navigation requests with a Network First strategy
const handler = createHandlerBoundToURL('/index.html');
const navigationRoute = new NavigationRoute(handler, {
  allowlist: [new RegExp('^/$'), new RegExp('^/index\\.html')],
});
registerRoute(navigationRoute);

// Cache configuration
const CACHE_CONFIGS = {
  fonts: {
    googleStylesheet: 'google-fonts-stylesheets-v1',
    googleFonts: 'google-fonts-webfonts-v1',
    fontMaxAge: 60 * 60 * 24 * 365, // 1 year
    fontMaxEntries: 30,
  },
  static: {
    cacheName: 'static-assets-v1',
    maxAge: 60 * 60 * 24 * 30, // 30 days
    maxEntries: 50,
  },
  api: {
    cacheName: 'api-cache-v1',
    maxAge: 60 * 60 * 24, // 24 hours
    maxEntries: 50,
  },
};

// Cache the Google Fonts stylesheets
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: CACHE_CONFIGS.fonts.googleStylesheet,
  })
);

// Cache the Google Fonts webfonts
registerRoute(
  ({ url }) => url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: CACHE_CONFIGS.fonts.googleFonts,
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: CACHE_CONFIGS.fonts.fontMaxAge,
        maxEntries: CACHE_CONFIGS.fonts.fontMaxEntries,
      }),
    ],
  })
);

// Cache static assets
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'image',
  new CacheFirst({
    cacheName: CACHE_CONFIGS.static.cacheName,
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: CACHE_CONFIGS.static.maxAge,
        maxEntries: CACHE_CONFIGS.static.maxEntries,
      }),
    ],
  })
);

// Cache API responses
registerRoute(
  ({ request }) =>
    request.destination === 'document' ||
    request.mode === 'cors' ||
    request.headers.get('accept')?.includes('application/json'),
  new NetworkFirst({
    cacheName: CACHE_CONFIGS.api.cacheName,
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: CACHE_CONFIGS.api.maxAge,
        maxEntries: CACHE_CONFIGS.api.maxEntries,
      }),
    ],
  })
);

// Handle messages from clients
self.addEventListener('message', (event: ExtendableMessageEvent) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Handle service worker activation
self.addEventListener('activate', (event: ExtendableEvent) => {
  event.waitUntil(
    Promise.all([
      // Clean up old cache versions
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (
              !Object.values(CACHE_CONFIGS).some((config) =>
                Object.values(config).includes(cacheName)
              )
            ) {
              return caches.delete(cacheName);
            }
            return Promise.resolve();
          })
        );
      }),
      // Ensure the service worker takes control of all clients
      self.clients.claim(),
    ])
  );
});
